// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelSuggest.Data;

#nullable disable

namespace TravelSuggest.Data.Migrations
{
    [DbContext(typeof(TravelSuggestContext))]
    partial class TravelSuggestContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravelSuggest.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageBase64")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Playa",
                            CityName = "Barcelona",
                            Description = "Barcelona combina playas, arquitectura modernista y una vibrante vida nocturna.",
                            IsPopular = true,
                            Season = "Verano",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Category = "Gastronomía",
                            CityName = "Madrid",
                            Description = "Madrid es conocida por sus museos de renombre, parques expansivos y una animada escena gastronómica.",
                            IsPopular = true,
                            Season = "Invierno",
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Category = "Cultural",
                            CityName = "Granada",
                            Description = "Granada alberga la impresionante Alhambra y una rica mezcla de culturas.",
                            IsPopular = true,
                            Season = "Primavera",
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            Category = "Aventura",
                            CityName = "Londres",
                            Description = "Explora la aventura urbana y los emocionantes parques de Londres con actividades para todos.",
                            IsPopular = false,
                            Season = "Otoño",
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            Category = "Ocio",
                            CityName = "Palma de Mallorca",
                            Description = "Conocida por sus impresionantes calas, playas y una vibrante vida nocturna.",
                            IsPopular = true,
                            Season = "Todas las estaciones",
                            UserId = 7
                        },
                        new
                        {
                            Id = 6,
                            Category = "Ciudad",
                            CityName = "Ámsterdam",
                            Description = "Ámsterdam es famosa por sus canales, museos y una animada vida cultural.",
                            IsPopular = true,
                            Season = "Primavera",
                            UserId = 8
                        });
                });

            modelBuilder.Entity("TravelSuggest.Models.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Rating")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("Suggestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_at = new DateTime(2024, 12, 8, 21, 20, 16, 195, DateTimeKind.Local).AddTicks(7291),
                            Description = "Aprende a surfear en las famosas playas de Barcelona con instructores profesionales.",
                            DestinationId = 1,
                            Price = 60.00m,
                            Rating = 5,
                            Title = "Clases de surf en la Barceloneta",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Created_at = new DateTime(2024, 12, 8, 21, 20, 16, 195, DateTimeKind.Local).AddTicks(7297),
                            Description = "Degusta una variedad de tapas y especialidades locales en el histórico Mercado de San Miguel.",
                            DestinationId = 2,
                            Price = 50.00m,
                            Rating = 5,
                            Title = "Tour gastronómico por el Mercado de San Miguel",
                            UserId = 4
                        },
                        new
                        {
                            Id = 3,
                            Created_at = new DateTime(2024, 12, 8, 21, 20, 16, 195, DateTimeKind.Local).AddTicks(7303),
                            Description = "Explora los majestuosos palacios y jardines de la Alhambra con un guía experto.",
                            DestinationId = 3,
                            Price = 30.00m,
                            Rating = 5,
                            Title = "Visita guiada a la Alhambra",
                            UserId = 5
                        },
                        new
                        {
                            Id = 4,
                            Created_at = new DateTime(2024, 12, 8, 21, 20, 16, 195, DateTimeKind.Local).AddTicks(7308),
                            Description = "Disfruta de impresionantes vistas de Londres mientras recorres las rutas de Hampstead Heath.",
                            DestinationId = 4,
                            Price = 25.00m,
                            Rating = 4,
                            Title = "Senderismo en Hampstead Heath",
                            UserId = 6
                        },
                        new
                        {
                            Id = 5,
                            Created_at = new DateTime(2024, 12, 8, 21, 20, 16, 195, DateTimeKind.Local).AddTicks(7314),
                            Description = "Descubre calas escondidas y disfruta de aguas cristalinas en un paseo en barco.",
                            DestinationId = 5,
                            Price = 150.00m,
                            Rating = 5,
                            Title = "Paseo en barco por las calas de Mallorca",
                            UserId = 7
                        },
                        new
                        {
                            Id = 6,
                            Created_at = new DateTime(2024, 12, 8, 21, 20, 16, 195, DateTimeKind.Local).AddTicks(7319),
                            Description = "Explora Ámsterdam como un local en un tour en bicicleta por sus canales históricos.",
                            DestinationId = 6,
                            Price = 40.00m,
                            Rating = 4,
                            Title = "Tour en bicicleta por los canales",
                            UserId = 8
                        });
                });

            modelBuilder.Entity("TravelSuggest.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "carlota@gmail.com",
                            Password = "carlota37",
                            Points = 0,
                            Role = "admin",
                            UserName = "Carlota"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jesus@gmail.com",
                            Password = "jesus31",
                            Points = 0,
                            Role = "admin",
                            UserName = "Jesús"
                        },
                        new
                        {
                            Id = 3,
                            Email = "jumar@gmail.com",
                            Password = "jumar123",
                            Points = 300,
                            Role = "user",
                            UserName = "Jumar"
                        },
                        new
                        {
                            Id = 4,
                            Email = "ana@gmail.com",
                            Password = "ana123",
                            Points = 300,
                            Role = "user",
                            UserName = "Ana"
                        },
                        new
                        {
                            Id = 5,
                            Email = "nerea@gmail.com",
                            Password = "nerea123",
                            Points = 300,
                            Role = "user",
                            UserName = "Nerea"
                        },
                        new
                        {
                            Id = 6,
                            Email = "bea@gmail.com",
                            Password = "bea123",
                            Points = 300,
                            Role = "user",
                            UserName = "Bea"
                        },
                        new
                        {
                            Id = 7,
                            Email = "laura@gmail.com",
                            Password = "laura123",
                            Points = 300,
                            Role = "user",
                            UserName = "Laura"
                        },
                        new
                        {
                            Id = 8,
                            Email = "pilar@gmail.com",
                            Password = "pilar123",
                            Points = 300,
                            Role = "user",
                            UserName = "Pilar"
                        });
                });

            modelBuilder.Entity("TravelSuggest.Models.Suggestion", b =>
                {
                    b.HasOne("TravelSuggest.Models.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.HasOne("TravelSuggest.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Destination");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
