// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelSuggest.Data;

#nullable disable

namespace TravelSuggest.Data.Migrations
{
    [DbContext(typeof(TravelSuggestContext))]
    [Migration("20241102164857_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TravelSuggest.Models.Destination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPopular")
                        .HasColumnType("bit");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Destinations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Ocio",
                            CityName = "Londres",
                            Description = "Explora la rica historia, cultura y entretenimiento que ofrece Londres, desde museos gratuitos hasta vibrantes mercados y parques.",
                            IsPopular = false,
                            Season = "Todo el año",
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Category = "Gastronómica",
                            CityName = "París",
                            Description = "La capital francesa es famosa por su exquisita gastronomía, desde panaderías hasta restaurantes de alta cocina.",
                            IsPopular = true,
                            Season = "Primavera",
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            Category = "Cultural",
                            CityName = "Ámsterdam",
                            Description = "Ámsterdam es conocida por sus museos, arquitectura y vibrante escena artística.",
                            IsPopular = true,
                            Season = "Verano",
                            UserId = 4
                        },
                        new
                        {
                            Id = 4,
                            Category = "Aventura",
                            CityName = "Mallorca",
                            Description = "La isla de Mallorca ofrece una amplia variedad de actividades al aire libre, desde senderismo hasta deportes acuáticos.",
                            IsPopular = true,
                            Season = "Verano",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("TravelSuggest.Models.Suggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DestinationId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Rating")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationId");

                    b.ToTable("Suggestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created_at = new DateTime(2024, 11, 2, 17, 48, 56, 639, DateTimeKind.Local).AddTicks(1717),
                            Description = "Disfruta de una experiencia única viendo los principales monumentos de Londres desde el agua.",
                            DestinationId = 1,
                            Price = 25.00m,
                            Rating = 4,
                            Title = "Tour en barco por el río Támesis",
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            Created_at = new DateTime(2024, 11, 2, 17, 48, 56, 639, DateTimeKind.Local).AddTicks(1723),
                            Description = "Explora las delicias culinarias de París mientras paseas por uno de los barrios más emblemáticos de la ciudad.",
                            DestinationId = 2,
                            Price = 60.00m,
                            Rating = 4,
                            Title = "Tour gastronómico por Montmartre",
                            UserId = 5
                        },
                        new
                        {
                            Id = 3,
                            Created_at = new DateTime(2024, 11, 2, 17, 48, 56, 639, DateTimeKind.Local).AddTicks(1728),
                            Description = "Explora la ciudad sobre dos ruedas y descubre su belleza única.",
                            DestinationId = 3,
                            Price = 15.00m,
                            Rating = 4,
                            Title = "Recorrido en bicicleta por los canales",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            Created_at = new DateTime(2024, 11, 2, 17, 48, 56, 639, DateTimeKind.Local).AddTicks(1733),
                            Description = "Descubre calas escondidas y cuevas marinas en un tour de motos de agua guiado.",
                            DestinationId = 4,
                            Price = 150.00m,
                            Rating = 5,
                            Title = "Tour motos de agua en Cala Gamba",
                            UserId = 4
                        });
                });

            modelBuilder.Entity("TravelSuggest.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "carlota@gmail.com",
                            Password = "Carlota36",
                            Points = 0,
                            Role = "admin",
                            UserName = "Carlota"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ana@gmail.com",
                            Password = "Ana123",
                            Points = 300,
                            Role = "user",
                            UserName = "Ana"
                        },
                        new
                        {
                            Id = 3,
                            Email = "jesus@gmail.com",
                            Password = "Jesus30",
                            Points = 300,
                            Role = "user",
                            UserName = "Jesus"
                        },
                        new
                        {
                            Id = 4,
                            Email = "paola@gmail.com",
                            Password = "Paola123",
                            Points = 300,
                            Role = "user",
                            UserName = "Paola"
                        },
                        new
                        {
                            Id = 5,
                            Email = "pilar@gmail.com",
                            Password = "Pilar123",
                            Points = 300,
                            Role = "user",
                            UserName = "Pilar"
                        });
                });

            modelBuilder.Entity("TravelSuggest.Models.Suggestion", b =>
                {
                    b.HasOne("TravelSuggest.Models.Destination", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationId");

                    b.Navigation("Destination");
                });
#pragma warning restore 612, 618
        }
    }
}
